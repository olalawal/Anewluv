<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonInstanceFactory.Extensions.Wcf</name>
    </assembly>
    <members>
        <member name="T:CommonInstanceFactory.Extensions.Wcf.InjectedInstanceProvider`1">
            <summary>
            A container-agnostic implementation of IInstanceProvider for WCF services.
            InjectedServiceBehavior will use this class to create and release instances
            of the service type.
            </summary>
            <typeparam name="TServiceType">Type implementing a service contract.</typeparam>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedInstanceProvider`1.#ctor(CommonInstanceFactory.ICommonInstanceFactory{`0})">
            <summary>
            Constructor accepting a common instance factory.
            </summary>
            <param name="container">Instance factory for selected container.</param>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedInstanceProvider`1.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            Get an instance using the specified container.
            </summary>
            <param name="instanceContext">The current instance context.</param>
            <param name="message">The message that triggered the creation of a service object.</param>
            <returns>Requested instance.</returns>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedInstanceProvider`1.GetInstance(System.ServiceModel.InstanceContext)">
            <summary>
            Get an instance using the specified container.
            </summary>
            <param name="instanceContext">The current instance context.</param>
            <returns>Requested instance.</returns>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedInstanceProvider`1.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
            <summary>
            Called when an instance context recycles a service object.
            </summary>
            <param name="instanceContext">The current instance context.</param>
            <param name="instance">The service instance to be recycled.</param>
        </member>
        <member name="T:CommonInstanceFactory.Extensions.Wcf.ReflectionHelper">
            <summary>
            Helper class to create a generic type using reflection.
            This class can be used by container-specific Instance Factory WCF extensions
            to create a non-generic service host for use in config files.
            </summary>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.ReflectionHelper.CreateGenericInstance(System.Type,System.Type,System.Object[])">
            <summary>
            Create a closed generic instance using reflection.
            </summary>
            <param name="genericType">Parent generic type.</param>
            <param name="argType">Generic type argument.</param>
            <param name="args">Other arguments.</param>
            <returns>Closed generic type instance.</returns>
        </member>
        <member name="T:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHostFactory`1">
            <summary>
            Base class for a container-specific service host factory.
            Override abstract methods to create container-specific service host.
            </summary>
            <typeparam name="TContainer">Dependency injection container type.</typeparam>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHostFactory`1.CreateContainer">
            <summary>
            Override to initialize selected container.
            </summary>
            <returns>Initialized container.</returns>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHostFactory`1.CreateInjectedServiceHost(`0,System.Type,System.Uri[])">
            <summary>
            Override to create container-specific service host.
            </summary>
            <param name="container">Selected dependency injection container.</param>
            <param name="serviceType">Specifies the type of service to host.</param>
            <param name="baseAddresses">The Uri array that contains the base addresses for the service hosted.</param>
            <returns>A container-specific service host for the type of service specified with a specific base address.</returns>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHostFactory`1.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates a service host for a specified type of service with a specific base address.
            </summary>
            <param name="serviceType">Specifies the type of service to host.</param>
            <param name="baseAddresses">The Uri array that contains the base addresses for the service hosted.</param>
            <returns>A service host for the type of service specified with a specific base address.</returns>
        </member>
        <member name="T:CommonInstanceFactory.Extensions.Wcf.InjectedServiceBehavior`1">
            <summary>
            Added by a container-specific service host to use the container to provide instances
            of the service type.
            </summary>
            <typeparam name="TServiceType">Type implementing a service contract.</typeparam>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceBehavior`1.#ctor(CommonInstanceFactory.ICommonInstanceFactory{`0})">
            <summary>
            Constructor accepting a common instance factory.
            </summary>
            <param name="container">Instance factory for selected container.</param>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceBehavior`1.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The host that is currently being built.</param>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceBehavior`1.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The service host that is currently being constructed.</param>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceBehavior`1.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Provides the ability to pass custom data to binding elements to support the contract implementation.
            </summary>
            <param name="serviceDescription">The service description of the service.</param>
            <param name="serviceHostBase">The host of the service.</param>
            <param name="endpoints">The service endpoints.</param>
            <param name="bindingParameters">Custom objects to which binding elements have access.</param>
        </member>
        <member name="T:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHelper`1">
            <summary>
            Helper class for spinning up WCF services for use with integration tests.
            </summary>
            <typeparam name="TServiceContract">Service contract type.</typeparam>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHelper`1.#ctor(System.ServiceModel.ServiceHost,System.String,System.ServiceModel.Channels.Binding)">
            <summary>
            Constructor for creating InjectedServiceHelper.
            </summary>
            <param name="serviceHost">Container-specific service host.</param>
            <param name="address">Service endpoint address.</param>
            <param name="binding">Service endpoint binding.</param>
        </member>
        <member name="M:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHelper`1.Dispose">
            <summary>
            Disposes the service host and client.
            </summary>
        </member>
        <member name="P:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHelper`1.ServiceHost">
            <summary>
            WCF service host.
            </summary>
        </member>
        <member name="P:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHelper`1.Client">
            <summary>
            Client used to invoke the service.
            </summary>
        </member>
        <member name="P:CommonInstanceFactory.Extensions.Wcf.InjectedServiceHelper`1.ClientEndpoint">
            <summary>
            Endpoint created by the InjectedServiceHelper.
            </summary>
        </member>
    </members>
</doc>
