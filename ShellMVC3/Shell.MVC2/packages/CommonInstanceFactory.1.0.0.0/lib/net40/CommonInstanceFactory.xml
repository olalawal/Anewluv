<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonInstanceFactory</name>
    </assembly>
    <members>
        <member name="T:CommonInstanceFactory.ICommonInstanceFactory`1">
            <summary>
            The generic Instance Factory interface. This interface is used
            to retrieve instances identified by type from a container.
            </summary>
            <typeparam name="TInstance">Type for requested instances.</typeparam>
        </member>
        <member name="M:CommonInstanceFactory.ICommonInstanceFactory`1.GetInstance">
            <summary>
            Get an instance of a type.
            </summary>
            <returns>The requested instance.</returns>
        </member>
        <member name="M:CommonInstanceFactory.ICommonInstanceFactory`1.GetAllInstances">
            <summary>
            Get all instances registered with the container.
            </summary>
            <returns>The requested instances.</returns>
        </member>
        <member name="M:CommonInstanceFactory.ICommonInstanceFactory`1.ReleaseInstance(`0)">
            <summary>
            Release an instance whose lifetime is managed by the container.
            </summary>
            <param name="instance">Instance to be released.</param>
        </member>
        <member name="T:CommonInstanceFactory.CommonInstanceFactoryBase`1">
            <summary>
            Provides default implementation for ICommonInstanceFactory.
            Adapters should inherit from this class and override the abstract methods.
            </summary>
            <typeparam name="TInstance">Type for requested instances.</typeparam>
        </member>
        <member name="M:CommonInstanceFactory.CommonInstanceFactoryBase`1.GetInstance">
            <summary>
            Get an instance of a type.
            </summary>
            <returns>The requested instance.</returns>
        </member>
        <member name="M:CommonInstanceFactory.CommonInstanceFactoryBase`1.GetAllInstances">
            <summary>
            Get all instances registered with the container.
            </summary>
            <returns>The requested instances.</returns>
        </member>
        <member name="M:CommonInstanceFactory.CommonInstanceFactoryBase`1.ReleaseInstance(`0)">
            <summary>
            Release an instance whose lifetime is managed by the container.
            </summary>
            <param name="instance">Instance to be released.</param>
        </member>
        <member name="M:CommonInstanceFactory.CommonInstanceFactoryBase`1.InternalGetInstance">
            <summary>
            Override for container to get an instance of a type.
            </summary>
            <returns>The requested instance.</returns>
        </member>
        <member name="M:CommonInstanceFactory.CommonInstanceFactoryBase`1.InternalGetAllInstances">
            <summary>
            Override for container to get all instances of a type.
            </summary>
            <returns>The requested instances.</returns>
        </member>
        <member name="M:CommonInstanceFactory.CommonInstanceFactoryBase`1.InternalReleaseInstance(`0)">
            <summary>
            Override for a container to release an instance whose lifetime is managed 
            by the container.
            </summary>
            <param name="instance">Instance to be released.</param>
        </member>
        <member name="T:CommonInstanceFactory.InstanceFactory`1">
            <summary>
            This class provides the ambient container for this application. If your
            framework defines such an ambient container, use InstanceFactory.Current
            to get it.
            </summary>
            <typeparam name="TInstance">Type for requested instances.</typeparam>
        </member>
        <member name="M:CommonInstanceFactory.InstanceFactory`1.SetInstanceFactory(CommonInstanceFactory.ICommonInstanceFactory{`0})">
            <summary>
            Set the current Instance Factory.
            </summary>
            <param name="instanceFactory">Instance factory selected to be the ambient factory.</param>
        </member>
        <member name="P:CommonInstanceFactory.InstanceFactory`1.Current">
            <summary>
            The ambient Instance Factory.
            </summary>
        </member>
    </members>
</doc>
