@model Shell.MVC2.Models.AccountModel
@using Shell.MVC2.AppFabric

@*<script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js") " type="text/javascript"></script>*@
@*<script src="<%: Url.Content("~/Scripts/devtrends.validation.js") %>" type="text/javascript"></script>
*@
<script type="text/javascript">





    function UpdateCitiesReg() {

        var sportcmb = $('#Country').data('tComboBox');
        var ziporpostalcmb = $('#ZipOrPostalCode').data('tComboBox');

        //#MyQuickSearch_MySelectedCountryName

        if (sportcmb != null) {
            var sportId = sportcmb.valueOf();


            $.post('/ComboBox/GetDefaultCityListAccount',
              "CountryName=" + sportcmb.text(),
              function (data) {
                  $("#City").data('tComboBox').dataBind(data.Cities);
                  //set first value if u want
                  // $("#City").data('tComboBox').value(data.MyCity);
                  // this piece is used to hide the div for postal codes or do anyting else bsaed on the json data retyrned
                  if (data.PostalCodeStatus != false) {
                      // alert("This country has postal codes");
                      //  $('#ZipPostalRegDiv').show();


                  }
                  else {

                      //use the hide hoing forward after all is tested
                      //  $('#ZipPostalRegDiv').hide(); 
                      //set the value as the default postal code 
                      // ziporpostalcmb.value(data.postalcode);
                      //now disable it

                  }


                  //bind the city list after change
              }, "json");


            //$.post("/Account/Account", null, "json");


            window.location.href = '<% = ResolveUrl("~/Account/Account") %>';



        }
        else {
            alert("You must pick a country!");
            return;

        }
    }


    //populates current city using jquery
    //needed for some reason beace its populated by jsson do loses model values
    function SetCurrentCityAccount() {

        var sportcmb = $("#City").data('tComboBox');


        $.post('/ComboBox/GetCurrentCityAccount',
              function (data) {

                  //set first value if u want
                  $("#City").data('tComboBox').value(data.MyCity);

              }, "json");
    }

    //sets the current postal code for the account model
    function SetCurrentPostalCodeAccount() {

        var sportcmb = $("#ZipOrPostalCode").data('tComboBox');


        $.post('/ComboBox/GetCurrentPostalCodeAccount',
              function (data) {

                  //set first value if u want
                  $("#ZipOrPostalCode").data('tComboBox').value(data.MyPostalCode);

              }, "json");

    }
    
    function UpdatePostalCodesReg() {

        var sportcmb = $('#City').data('tComboBox');
        var ziporpostalcmb = $('#ZipOrPostalCode').data('tComboBox');
        var selectedcountry = $('#Country').data('tComboBox');


        var cityprovince_array = sportcmb.text().split(',');
        //  alert(mytool_array[0] + " " + mytool_array[1] + " " + mytool_array[2]);


        if (sportcmb != null) {
            var sportId = sportcmb.value();


            $.post('/ComboBox/GetDefaultPostalCodeListAccount', { City: cityprovince_array[0], CountryName: selectedcountry.text() },
              function (data) {

                  if (data.PostalCodeStatus != false) {

                      try {
                          ziporpostalcmb.dataBind(data.postalcodes);
                      } catch (err) {
                          return false;
                      }

                  }
                  else {

                      //set the value to the geopostalcode value
                      ziporpostalcmb.value(data.geocode);


                  }


              }, "json");
            //add a function to bind postal code as well
        }
        else {
            alert("You must pick a country!");
            return;

        }
    }

</script>

@*//new script to verify that user wants to decativate profile *@

<script type="text/javascript" >


    $(function () {

        $('#deactivateaccount').click(function () {
            //add a dialog to ask if they want to delete the 
            //get the list of all checked items and push them into a list
            //first reset the list
            //var items = ;
            // var items = new Array();
            //get the current delete confirm message from server   
            //0 is for deactiave account

            debugger;
            var UxMessageId = 0;



//            $.ajax({
//                url: '/Members/UpdateInterestViewed',
//                type: 'POST',
//                // you can send some additional data along with the request 
//                data: { UxMessageId: UxMessageId },
//                success: function (result) {
//                    // TODO: process the results returned by the controller 
//                    if (result.message) {
//                        deleteconfirm(message.message, 'Confirm Delete', 'Confirm', true, true, message.screenname);
//                    }
//                }
           // });


            $.ajax({
                url: '../UxMessage/Getmessage',
                type: 'POST',
                // you can send some additional data along with the request 
                data: { UxMessageId: UxMessageId },
                success: function (result) {
                    // TODO: process the results returned by the controller 
                }
            });




        });

        //TO DO set up as a call back function in a var
        function getuxmessagefromserver(uxmessagetypeId) {

            // var json = JSON.stringify(uxmessagetypeId);
            //ajax call to update the databse i.e remove items and the refresh the UI


        }

        //creates a dynamic dialog for confirm
        //items are variables that might be needed in a function for ok or cancle
        function deleteconfirm(message, title, okbuttontext, ismodal, showimage, screenname) {

            var buttonsOpts = {};

            if (okbuttontext == "Confirm") {
                buttonsOpts[okbuttontext] = function () { deactivateaccount(items); $(this).dialog('close'); };
                buttonsOpts["Cancel"] = function () { $(this).dialog("close"); };
            }
            //we have just an alert type dilago so just use the ok button with no closer
            else {
                buttonsOpts[okbuttontext] = function () { $(this).dialog("close"); };
            }




            //set up inner text
            //4-3-2012 added a way to also add image div based on the flag
            // var NewDialog = $(document.createElement('div'));
            // NewDialog.html(message);


            //add the image and div tag to the Dialog
            // if (showimage == true) NewDialog.append(createImageBox(35, 35, items[0]));


            if (!ismodal) ismodal = true;

            NewDialog.dialog({
                modal: ismodal,
                title: (title) ? title : 'Notification',
                autoOpen: true,
                width: 300,
                show: 'clip',
                hide: 'clip',
                buttons: buttonsOpts
            });

            // NewDialog.appendTo($("body"));
            //TO DO another way to add hml to dialog 
            //$('#dialog-test').html('<div> weak </div>');
            NewDialog.dialog('open');

        }


        //we are using the global variable list in this  document
        function deactivateaccount(screenname) {


            // var json = JSON.stringify(screennames);

            //ajax call to update the databse i.e remove items and the refresh the UI
            $.ajax({
                url: '../Account/DeactivateAccount',
                type: 'POST',
                dataType: 'json',
                // you can send some additional data along with the request 
                data: screenname,
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    //deactivate message is pretty standard no need for another server hit
                    if (result == true) {//show a dialog that only has ok telling the user what happend and what happens next
                        deletecompletedialog("Your account has been deactivated, you re-activate it in the future use the contact us and list your email address stating you want to have your account re-instated");
                    }
                    else {
                        alert("There was an error de-activating your account, our system adimistrators have been notifed, please try again later");
                    }
                }
            });
        }


        function deletecompletedialog(message) {

            var okbuttontext = "exit";
            var buttonsOpts = {}

            //if we have a confirm delete put on both buttons 
            // if (okbuttontext == "Confirm") {
            buttonsOpts[okbuttontext] = function () { signoutdeactivateduser(); $(this).dialog('close'); }
            // buttonsOpts["Cancel"] = function () { $(this).dialog("close"); };
            //}
            //we have just an alert type dilago so just use the ok button with no closer
            //  else {
            //        buttonsOpts[okbuttontext] = function () { $(this).dialog("close"); };
            //  }

            //set up inner text
            //4-3-2012 added a way to also add image div based on the flag
            var NewDialog = $(document.createElement('div'));
            NewDialog.html(message);


            //add the image and div tag to the Dialog
            if (showimage == true) NewDialog.append(createImageBox(35, 35, items[0]));


            if (!ismodal) ismodal = true;

            NewDialog.dialog({
                modal: ismodal,
                title: (title) ? title : 'Notification',
                autoOpen: true,
                width: 300,
                show: 'clip',
                hide: 'clip',
                buttons: buttonsOpts
            });

            // NewDialog.appendTo($("body"));
            //TO DO another way to add hml to dialog 
            //$('#dialog-test').html('<div> weak </div>');
            NewDialog.dialog('open');

        }

        function signoutdeactivateduser() {

            var logouturl = '@Html.ResolveUrl("/Account/LogOff")';
            //ajax call to update the databse i.e remove items and the refresh the UI
            $.ajax({
                url: logouturl,
                type: 'POST',
                dataType: 'json',
                // you can send some additional data along with the request 
                data: screenname,
                contentType: null,
                success: function (data) {
                }
            });

        }
    });   
</script>


<div id="MainContent">
   
    @{  List<SelectListItem> Ages = CachingFactory.SharedObjectHelper.GetAgeList();  } 
    @{  List<SelectListItem> Genders = CachingFactory.SharedObjectHelper.GetGenderList();  } 
    @{  List<SelectListItem> Countries = CachingFactory.SharedObjectHelper.GetCountrysList();  } 
    @{  List<SelectListItem> SecurityQuestions = CachingFactory.SharedObjectHelper.GetSecurityQuestionsList();  } 

	
 @using (Html.BeginForm("Account", "Account", FormMethod.Post))
           { 


<div>
        <!--
		<div class="Change_Email_AddressAccountSettings">
			
				<p class="lastNode">Change Email Address
			</p>
		</div>
		<input type="text" name="changeEmAddressTextField_win_AccountSettings" id="changeEmAddressTextField_win_AccountSettings" value="Text" />
				<div class="clearFloat"></div>
		<div class="Confirm_EmailAccountSettings">
			
				<p class="lastNode">Confirm Email
			</p>
		</div>
		<input type="text" name="confirmEmTextField_win_AccountSettings" id="confirmEmTextField_win_AccountSettings" value="Text" />
				<div class="clearFloat"></div>
                -->

    	<div class="Birth_DateAccountSettings">	

                 <div class="editor-label">
                        @Html.LabelFor(model =>  model.BirthDate)
                </div> 
		</div>
		<div id="birthDateComboBox_win_AccountSettings">
        <div class="editor-field">
                @(Html.Telerik().DatePickerFor (model =>  model.BirthDate)
                                   .Name("BirthDate")
                     .HtmlAttributes(new { style = string.Format("width:{0}px",200) })
)
        </div>  
		<div class="clearFloat"></div>
        </div>
        <div class ="TextFeildRightValidation">
        @Html.ValidationMessageFor(model =>  model.BirthDate)
        </div> 
        <div class="clearFloat"></div>
		<div class="GenderAccountSettings">
			
			 <div class="editor-label">
                        @Html.LabelFor(model =>  model.Gender)
                </div> 
		</div>
		<div id= "genderComboBox_win_AccountSettings">
            <div class="editor-field">
                                        @(Html.Telerik().DropDownListFor(model =>  model.Gender)
                                         .Name("Gender")
                    .HtmlAttributes(new { style = string.Format("width: 205px") })          
                    .BindTo(Genders) 
)
            </div>
            <div class="clearFloat"></div>
        </div>
        
        <div class ="TextFeildRightValidation">
             @Html.ValidationMessageFor(model =>  model.Gender )
        </div>  
        <div class="clearFloat"></div>
		<div class="Change_PasswordAccountSettings">
			
			   <div class="editor-label">
                        @Html.LabelFor(model =>  model.Password)
                </div> 
		</div>
		<div id="changePassWrdTextField_win_AccountSettings" >
        <div class="editor-field">
                   @Html.PasswordFor(model => model.Password)               
            </div>
	    <div class="clearFloat"></div>    
        </div>
        <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model => model.Password)
            </div>

       <div class="clearFloat"></div>
		<div class="Confirm_PasswordAccountSettings">
			 <div class="editor-label">
                        @Html.LabelFor(model =>  model.ConfirmPassword)
                 </div> 
			
		</div>

		<div id="confirmPasWrdTextField_win_AccountSettings" >
         <div class="editor-field">
                   @Html.PasswordFor(model =>  model.ConfirmPassword)               
            </div>
			<div class="clearFloat"></div> 
        </div>
        <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model =>  model.ConfirmPassword)
            </div>
        <div class="clearFloat"></div>


		<div class="CountryAccountSettings">			
		  <div class="editor-label">
                        @Html.LabelFor(model =>  model.Country)
                 </div> 
		</div>
		<div id="countryComboBox_win_AccountSettings">
             <div class="editor-field">
                                      
                           @(Html.Telerik().ComboBoxFor(model =>  model.Country)
                            .Name("Country")
                      .AutoFill(true) //fill it with default data                    
                     .BindTo(Countries)
                     .HtmlAttributes(new { style = string.Format("width:{0}px",205) })
                      .HighlightFirstMatch(true) 
                      .ClientEvents(events => events.OnChange("UpdateCitiesReg"))
                    
)  
            </div>
			<div class="clearFloat"></div>  
        </div>
        <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model =>  model.Country)
            </div>
		<div class="clearFloat"></div>
		<div class="My_CityAccountSettings">			
			  <div class="editor-label">
                        @Html.LabelFor(model =>  model.City)
                 </div> 
		</div>
		<div id="myCityTextField_winAccountSettings" >
         <div class="editor-field">
                  @(Html.Telerik().ComboBoxFor(model => model.City )
                         .Name("City")
                      .AutoFill(true)
                          .HtmlAttributes(new { style = string.Format("width:{0}px", 205) })
                           .ClientEvents(events => events.OnChange("UpdatePostalCodesReg"))
                           .ClientEvents(events => events.OnLoad("SetCurrentCityAccount"))
                        .DataBinding(binding => binding.Ajax()
                                                                    .Select("_FilteringAjaxAccount", "ComboBox")
                                                     
                          .Delay(300)
                          .Cache(true)
                          
                        )                  
                                             
                      .Filterable(filtering =>
                      {
                          if (1 != 0)
                          {
                              filtering.FilterMode(AutoCompleteFilterMode.StartsWith);
                              filtering.MinimumChars(0);
                          }
                      })
                      .HighlightFirstMatch(true)
                      
                      
) 
            </div>
		<div class="clearFloat"></div>  
        </div>
        <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model =>  model.City)
         </div>
		<div class="clearFloat"></div>

                @if (Model.PostalCodeStatus)
       {            

   
     
          
			<div class="ZipPostal_CodeAccountSettings">
			
                 <div class="editor-label">
                        @Html.LabelFor(model =>  model.ZipOrPostalCode )
                 </div> 
						
			</div>                        
            <div class ="ComboBox_win_ZipPstAccountSettings">
            <div class="editor-field">
            
            
              
                
                @(Html.Telerik().ComboBoxFor(model =>  model.ZipOrPostalCode)
                      .Name("ZipOrPostalCode")
                      .AutoFill(true)
                        .HtmlAttributes(new { style = string.Format("width:{0}px", 205) })
                        .ClientEvents(events => events.OnLoad("SetCurrentPostalCodeAccount"))
                        .DataBinding(binding => binding.Ajax()
                                                          .Select("_FilteringPostalCodesAjaxAccount", "ComboBox")
                                               
                          .Delay(300)
                          .Cache(true)
                               )                    
                                             
                      .Filterable(filtering =>
                      {
                          if (1 != 0)
                          {
                              filtering.FilterMode(AutoCompleteFilterMode.StartsWith);
                              filtering.MinimumChars(0);
                          }
                      })
                      .HighlightFirstMatch(true)
                      
                      
)
                   
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model =>  model.ZipOrPostalCode)
            </div> 
       

            
               } 

        <div class="clearFloat"></div>
		<div class="Security_QuestionAccountSettings">
			
			    <div class="editor-label">
              @Html.LabelFor(model =>  model.SecurityQuestion)
                </div> 
		</div>
		<div id="securityQuesComboBox_win_AccountSettings">
		<div class="editor-field">

                  @(Html.Telerik().DropDownListFor(model => model.SecurityQuestion)
                                                  .Name("SecurityQuestion")
                                        
                                    .BindTo(SecurityQuestions)
                                    .HtmlAttributes(new { style = string.Format("width:{0}px", 205) })
                                     
)
            
            </div>
        
        		<div class="clearFloat"></div>
        </div> 
        <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model =>  model.SecurityQuestion)
            </div>
        <div class="clearFloat"></div>
		<div class="Security_AnswerAccountSettings">
			
			 <div class="editor-label">
                 @Html.LabelFor(model =>  model.SecurityAnswer)
             </div> 
		</div>
		<div id="securityAnsrTextField_win_AccountSettings" >
        <div class="editor-field">
                   @Html.TextBoxFor(model =>  model.SecurityAnswer)               
            </div>
				<div class="clearFloat"></div>
           </div>     
		
		<div class="clearFloat"></div>
	

             <div id="buttonbootstrap1">
             <button class="btn btn-primary" type="submit" value="Registration">Save Changes</button>
			</div>
			<div id="buttonbootstrap2">
               <button class="btn btn-inverse" type="submit" onclick='javascript:history.go(-1);return false;'>Cancel And Return</button>
          
	     </div>

       <div class="clearFloat"></div>
       <div id ="buttonTelerikCenterLinkDiv">
    <div style="display :none ;" >
    @Html.ActionLink("Back to homepage", "MembersHome","Members")
</div>
       
    </div>

</div>

 
 } 



 <div class="DeActivate_AccountAccountSettings">			
				<p class="lastNode">
                  <button id="deactivateaccount" class="btn"> DeActivate Account</button>
               
			</p>
</div>

</div>

