@model Shell.MVC2.Models.RegisterModel
@using Shell.MVC2.AppFabric
@using Shell.MVC2.Controllers

<script type="text/javascript">



    var defaultcountry = '';
    var defaultcity = '';
    var defaultziporpostalcode = '';
    var openiduser = false;

    //toggles showing or hiding of postal code status based on postback values from get or post
    //4-11-2012 updated this code to use the Razor syntax
   //TO DO combine this to use one shared script plz
    $(document).ready(function () {


        configureJainRain();
        //open jainrain pop up
        openJainRain();
        //TO DO hold off running the rest unless JAINRAIN is closed.
        //finish populating the register data in backgroun
        //if the model is empty we want to get the infor from geo data  
        //reget data from service 
        var country = '@Model.Country';
        // var countryexists = false;
        if (country == null || country == '') {
            UpdateGuestGeoData()
        } else {
           // debugger;
            //   countryexists == true; get data from the model in the viewstate
            defaultcity = '@Model.City';
            defaultcountry = '@Model.Country';
            defaultziporpostalcode = '@Model.ZipOrPostalCode';
            showOrhidepostalcodes('@Model.PostalCodeStatus');
        }



    });

    //configure jainrain window and get it ready
    function configureJainRain() {
       if (typeof window.janrain !== 'object') window.janrain = {};
        window.janrain.settings = {};
        // debugger;
        var url = '@Url.Action("AuthenticateOpenID","Account", null, "http")';
        var nav = url.indexOf('#');
        url = nav > 0 ? url.substring(0, nav) : url;
        url = url.replace('index.html', '');

        janrain.settings.tokenUrl = url;

        function isReady() { janrain.ready = true; };
        if (document.addEventListener) {
            document.addEventListener("DOMContentLoaded", isReady, false);
        } else {
            window.attachEvent('onload', isReady);
        }

        var e = document.createElement('script');
        e.type = 'text/javascript';
        e.id = 'janrainAuthWidget';

        if (document.location.protocol === 'https:') {
            e.src = 'https://rpxnow.com/js/lib/anewluv/engage.js';
        } else {
            e.src = 'http://widget-cdn.rpxnow.com/js/lib/anewluv/engage.js';
        }

        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(e, s);
    }

    //open jainrain dialog
    function openJainRain() {
        //$('#dialog-confirm').dialog('open');       
        jainrain = $('.janrainEngage');
        if (janrain.ready === false) {
            window.setTimeout(function () {
                janrain.engage.signin.modal.init();
            }, 1000);
        }
        else {
            //  janrain.engage.signin.modal.init();
        }
    }

    function UpdateGuestGeoData() {

        var url = "http://www.geoplugin.net/php.gp?ip=";

        $.ajax({
            url: 'http://www.geoplugin.net/json.gp?jsoncallback=?',
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (geodata) {
                //  alert(result['geoplugin_city']);
                // debugger;

                var samplemembersviewmodel = {
                    MyCountryName: geodata['geoplugin_countryName'],
                    MyCountryCode: geodata['geoplugin_countryCode'],
                    MyContinentCode: geodata['geoplugin_continentCode'],
                    MyRegionName: geodata['geoplugin_regionName'],
                    MyCity: geodata['geoplugin_city'],
                    MyLongitude: geodata['geoplugin_longitude'],
                    MyLatitude: geodata['geoplugin_latitude'],
                    MyUserAgent: navigator.userAgent,
                    MyIpAddress: geodata['geoplugin_request']

                };

                //5/24/2012 asynch call to save the geo data once per session
                $.ajax({
                    url: '@Url.Action("LogGuestGeoData", "home")',
                    data: JSON.stringify(samplemembersviewmodel),
                    type: 'POST',
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (result) {
                        //do nothing for now
                        //send email to admins statting we could not log geo data and why
                    }
                });


                $.ajax({
                    url: '@Url.Action("UpdateGuestGeoData", "home")',
                    data: JSON.stringify(samplemembersviewmodel),
                    type: 'POST',
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (result) {

                      
                        debugger;
                        var object = $.parseJSON(result.model);

                        showOrhidepostalcodes(object.MyPostalCodeStatus);
                        //SetCurrentCity(stateprovince);
                        defaultcity = object.MyCity;
                        defaultziporpostalcode = object.MyPostalCodeStatus;
                        defaultcountry = object.MyCountryName;
                        //UpdateCitiesReg();
                    }
                });
            }
        });

    }

    function showOrhidepostalcodes(postalcodestatus) {

        //var postalcodestatus = '@Model.PostalCodeStatus';
        // debugger;
        if (postalcodestatus == 'True') {
            //   alert('<%=Model.PostalCodeStatus %>');
            $('#ZipPostalRegDiv').show();
        }
        else {
            $('#ZipPostalRegDiv').hide();
        }
    
    }

      //set the value of the city combo box to whats in model
    function SetCurrentCity() {
       // debugger;
        $("#City").data('tComboBox').value(defaultcity);  
     
}
function SetCurrentZipOrPostalCode() {
    // debugger;
    $("#ZipOrPostalCode").data('tComboBox').value(defaultziporpostalcode);
 }

 function SetCurrentCountry() {
     //  debugger;
     $("#Country").data('tComboBox').value(defaultcountry);
 }

 //same for gender
 function SetCurrentGender() {   
     $('#Gender').data("tDropDownList").value('@Model.Gender');
 }

function UpdateCitiesReg() {

        OnCountryChange();

        var sportcmb = $('#Country').data('tComboBox');
        var ziporpostalcmb = $('#ZipOrPostalCode').data('tComboBox');
        //

        //#MyQuickSearch_MySelectedCountryName

        if (sportcmb != null) {
            var sportId = sportcmb.valueOf();


            $.post('../ComboBox/GetDefaultCityListRegister',
              "CountryName=" + sportcmb.text(),
              function (data) {
                  $("#City").data('tComboBox').dataBind(data.Cities);
                  // this piece is used to hide the div for postal codes or do anyting else bsaed on the json data retyrned
                  if (data.PostalCodeStatus != false) {
                     // alert("This country has postal codes");
                   $('#ZipPostalRegDiv').show();
                    // ziporpostalcmb.enable();
                  }
                 else {

                      //use the hide hoing forward after all is tested
                    $('#ZipPostalRegDiv').hide(); 
                     //set the value as the default postal code 
                    // ziporpostalcmb.value(data.postalcode);
                     //now disable it
                     //ziporpostalcmb.disable();
                  }


                  //bind the city list after change
              }, "json");


             //$.post("/Account/Account", null, "json");
             //window.location.href = '<% = ResolveUrl("~/Account/Register") %>';


        }
        else {
            alert("You must pick a country!");
            return;

        }
    }

    function UpdatePostalCodesReg() {

        //reset postal code
        OnCityChange();

        var citycmb = $('#City').data('tComboBox');
        var ziporpostalcmb = $('#ZipOrPostalCode').data('tComboBox');
        var countrycmb = $('#Country').data('tComboBox');
               
 
        //alert("your country is " + countrycmb.value());

        //does nothing atm
        if (citycmb.value() != null ) 
        {
            var cityid = citycmb.value();


            var cityprovince_array = citycmb.text().split(',');
           //alert(mytool_array[0] + " " + mytool_array[1] + " " + mytool_array[2]);


            $.post('/ComboBox/GetDefaultPostalCodeListRegister', { City: cityprovince_array[0], CountryName: countrycmb.value() },
              function (data) {



                  if (data.PostalCodeStatus != false) {

                      $('#ZipPostalRegDiv').show; 

                      try {
                          ziporpostalcmb.dataBind(data.postalcodes);
                      } catch (err) {
                          return false;
                      }
                    
                  }
                  else {

                      //set the value to the geopostalcode value
                       ziporpostalcmb.value(data.geocode);
                      //  $('#ZipPostalRegDiv').hide(); 
                     
                  }

                   //set the value to the geopostalcode value
                   //ziporpostalcmb.value(data.geocode);

                 
              }, "json");
            //add a function to bind postal code as well
        }
        else {
            alert("You must pick a  city ");
            return;

        }
    }


    //functions to pass values to the ajax methods i.e like current city and country to help with binding
    //to do if we have the city and state find and auto fill the postal code please
    //****************************************************************************************************
    function onCityDataBinding(e) {


        var countrycmb = $('#Country').data('tComboBox');
        //pass the country name from the combo box of countries to the filtering json
        e.data = $.extend({}, e.data, {country: countrycmb.value()});

    }

    function onZipOrPostalCodeDataBinding(e) {

        var citycmb = $('#City').data('tComboBox');
        var countrycmb = $('#Country').data('tComboBox');

        //trim out comas and special chars out of the country
        if (citycmb.value() != null) {

            var cityprovince_array = citycmb.text().split(',');

            //pass the country name from the combo box of countries to the filtering json
            e.data = $.extend({}, e.data, { country: countrycmb.value(), city: cityprovince_array[0].toString() });

        }

    }

  



  //****************************************************************************************************



    //handle when the countries changes
    // we want to reset the rest of the combo boxes as well
    function OnCountryChange(e) {
        //reshow postal code inace it was hidded
       // $('#ZipPostalRegDiv').show();


        // var countrycombo = $("#Country").data('tComboBox');
        var citycombo = $("#City").data('tComboBox');
        var ziporpostalcombo = $('#ZipOrPostalCode').data('tComboBox');

        citycombo.value("");
        citycombo.reload();
        ziporpostalcombo.value("");
        ziporpostalcombo.reload();

       // $('#ZipPostalRegDiv').hide();
    }


    //same thing for when the city changes we want to reset the postal code combo
    function OnCityChange(e) {

        //reshow postal code inace it was hidded
        //$('#ZipPostalRegDiv').show();

        var ziporpostalcombo = $('#ZipOrPostalCode').data('tComboBox');
        ziporpostalcombo.value("");
        ziporpostalcombo.reload();
    }

  



</script>

<div id ="MainContent">

 @{  List<SelectListItem> Ages = CachingFactory.SharedObjectHelper.GetAgeList();  } 
    @{  List<SelectListItem> Genders = CachingFactory.SharedObjectHelper.GetGenderList();  } 
    @{  List<SelectListItem> Countries = CachingFactory.SharedObjectHelper.GetCountrysList();  } 



        @using (Html.BeginForm("Register", "Account", FormMethod.Post))
        { 
           
         <div>
      
            <div class="UsernameReg">				
			    <p >
                 <div class="editor-label">
                @Html.LabelFor(model => model.UserName)
                </div> 
				</p>
			</div>

            <div id ="TextField_win_UsrNmeReg">
            <div class="editor-field">
                   @Html.TextBoxFor(model => model.UserName)               
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model => model.UserName)
            </div>         
			         
		

            <div class="clearFloat"></div>
			<div class="Email_AddressReg">				
				   <p >
                 <div class="editor-label">
                @Html.LabelFor(model => model.Email)
                </div> 
				</p>
			</div>
            <div id ="TextField_win_EmailAdrssReg">
            <div class="editor-field">
                 @Html.TextBoxFor(model => model.Email)          
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
              @Html.ValidationMessageFor(model => model.Email)
            </div> 
            <div class="clearFloat"></div>


			<div class="Confirm_EmailReg">
				   <p >
                 <div class="editor-label">
                @Html.LabelFor(model => model.ConfirmEmail)
                </div> 
				</p>				
			</div>
             <div id ="TextField_win_CnfrmEmailReg">
            <div class="editor-field">
                    @Html.TextBoxFor(model => model.ConfirmEmail)            
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
              @Html.ValidationMessageFor(model => model.ConfirmEmail)
            </div>
		   <div class="clearFloat"></div>


			<div class="Birth_DateReg">
					   <p >
                 <div class="editor-label">
                        @Html.LabelFor(model => model.BirthDate)
                </div> 
				</p>					
			</div>
            <div id ="ComboBox_win_BrthDteReg">
            <div class="editor-field">
             @(Html.Telerik().DatePickerFor(model => model.BirthDate)
                                   .Name("BirthDate")
                     .HtmlAttributes(new { style = string.Format("width:{0}px", 200) })
)
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
             @Html.ValidationMessageFor(model => model.BirthDate)
            </div>  
            <div class="clearFloat"></div>


			<div class="GenderReg">				
					 <p >
                 <div class="editor-label">
                        @Html.LabelFor(model => model.Gender)
                </div> 
				</p>	
			</div>
            <div id ="ComboBox_win_GenderReg">
            <div class="editor-field">
                                        @(Html.Telerik().DropDownListFor(model => model.Gender)
                                         .Name("Gender")
                 //.ClientEvents(events => events.OnLoad("SetCurrentGender"))
                    .HtmlAttributes(new { style = string.Format("width: 200px") })
                    .BindTo(Genders)



)
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model => model.Gender)
            </div>   

		   <div class="clearFloat"></div>

			<div class="passwordReg">				
					 <p >
                 <div class="editor-label">
                        @Html.LabelFor(model => model.Password)
                </div> 
				</p>
			</div>
             <div id ="TextField_win_psswrdReg">
            <div class="editor-field">
                   @Html.PasswordFor(model => model.Password)               
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model => model.Password)
            </div>  
            <div class="clearFloat"></div>

			<div class="Confirm_PasswordReg">
				  <p >
                 <div class="editor-label">
                        @Html.LabelFor(model => model.ConfirmPassword)
                 </div> 
				</p>				
			</div>

            <div id ="TextField_win_CnfrmPsswrdReg">
            <div class="editor-field">
                   @Html.PasswordFor(model => model.ConfirmPassword)               
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model => model.ConfirmPassword)
            </div> 
			 <div class="clearFloat"></div>
			<div class="CountryReg">				
					  <p >
                 <div class="editor-label">
                        @Html.LabelFor(model => model.Country)
                 </div> 
				</p>
			</div>            
             <div id ="ComboBox_win_CountryReg">
            <div class="editor-field">
                                      
                           @(Html.Telerik().ComboBoxFor(model => model.Country)
                            .Name("Country")
                      .AutoFill(true) //fill it with default data

                     .BindTo(Countries)
                     .HtmlAttributes(new { style = string.Format("width:{0}px", 205) })
           .ClientEvents(events => events.OnLoad("SetCurrentCountry"))

                      .HighlightFirstMatch(true)
                      .ClientEvents(events => events.OnChange("UpdateCitiesReg"))

)  
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model => model.Country)
            </div>
              		
			<div class="clearFloat"></div>
			<div class="My_CityReg">				
							  <p >
                 <div class="editor-label">
                        @Html.LabelFor(model => model.City)
                 </div> 
				</p>				
			</div>            
             <div id ="TextField_win_MyCityReg">
            <div class="editor-field">
                  @(Html.Telerik().ComboBoxFor(model => model.City)
                                                                .Name("City")
                      .AutoFill(true)
                          .HtmlAttributes(new { style = string.Format("width:{0}px", 205) })
                                          .ClientEvents(events => events.OnChange("UpdatePostalCodesReg"))
                                         .ClientEvents(events => events.OnDataBinding("onCityDataBinding"))
                                         .ClientEvents(events => events.OnLoad("SetCurrentCity"))
                        .DataBinding(binding => binding.Ajax()
                                                     .Select("_FilteringAjaxRegister", "ComboBox")
                          .Delay(300)
                          .Cache(true)

                        )

                      .Filterable(filtering =>
                      {
                          if (1 != 0)
                          {
                              filtering.FilterMode(AutoCompleteFilterMode.StartsWith);
                              filtering.MinimumChars(0);
                          }
                      })
                      .HighlightFirstMatch(true)


) 
            </div>
			<div class="clearFloat"></div>           
			</div>
             <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model => model.City)
             </div>  
            
			<div class="clearFloat"></div>

@*
               <% if (Model.PostalCodeStatus)
       { %>           
*@
       <div  id ="ZipPostalRegDiv">
       
       
			<div class="ZipPostal_CodeReg">
				 <p >
                 <div class="editor-label">
                        @Html.LabelFor(model => model.ZipOrPostalCode)
                 </div> 
				</p>			
			</div>                        
            <div id ="ComboBox_win_ZipPstReg">
            <div class="editor-field">
                
                @(Html.Telerik().ComboBoxFor(model => model.ZipOrPostalCode)
                      .Name("ZipOrPostalCode")
                      .AutoFill(true)
                      .ClientEvents(events => events.OnDataBinding("onZipOrPostalCodeDataBinding"))
                      .ClientEvents(events => events.OnLoad("SetCurrentZipOrPostalCode"))                      
                        .HtmlAttributes(new { style = string.Format("width:{0}px", 205) })
                        .DataBinding(binding => binding.Ajax()
                            
                                               .Select("_FilteringPostalCodesAjaxRegister", "ComboBox")

                          .Delay(300)
                          .Cache(true)
                               )

                      .Filterable(filtering =>
                      {
                          if (1 != 0)
                          {
                              filtering.FilterMode(AutoCompleteFilterMode.StartsWith);
                              filtering.MinimumChars(0);
                          }
                      })
                      .HighlightFirstMatch(true)



)
                   
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
                @Html.ValidationMessageFor(model => model.ZipOrPostalCode)
            </div> 
            
             </div>
        @*      <% } %>*@


			<div class="clearFloat"></div>
			<div class="ScreenameReg">				
			<p >
                 <div class="editor-label">
              @Html.LabelFor(model => model.ScreenName)
                </div> 
				</p>
			</div>
            <div id ="TextField_win_ScrnNameReg">
            <div class="editor-field">
                    @Html.TextBoxFor(model => model.ScreenName)   
            </div>
			<div class="clearFloat"></div>           
			</div>
            <div class ="TextFeildRightValidation">
             @Html.ValidationMessageFor(model => model.ScreenName)
            </div>                                    
            <div class="clearFloat"></div>
			
          

            
    
		    <div id="buttonReg1Div">
             <button class="t-button" type="submit" value="Registration">Save</button>
			</div>
			<div id="buttonReg2Div">
             <button class="t-button" type="submit" onclick='javascript:history.go(-1);return false;'>Cancel</button>
           
			</div>
               <div class="clearFloat"></div>
                <div  class  ="CenterLinkDiv">
              <a class="btn-auth btn-facebook janrainEngage" href="#button">Sign in with <b>Facebook</b></a>
             <a class="btn-auth btn-google janrainEngage" href="#button">or with <b>Google</b></a>
             <a class="btn-auth btn-yahoo janrainEngage" href="#button">or with <b>Yahoo</b></a>
             </div> 

            <div id ="CenterLinkDiv">
            @Html.ActionLink("Back to Home Page", "SplashPage", "Home", null, new { @class = "MvcActionLinkStyle" })
       
    </div>

         

     

   



  
 </div>
        }
 </div> 
