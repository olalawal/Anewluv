//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.544
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Misc.PhotoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ServiceFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Detail {
            get {
                return this.DetailField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailField, value) != true)) {
                    this.DetailField = value;
                    this.RaisePropertyChanged("Detail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhotoService.IPhotoService")]
    public interface IPhotoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getallphotosbyusername", ReplyAction="http://tempuri.org/IPhotoService/getallphotosbyusernameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        System.Collections.Generic.List<Shell.MVC2.Domain.Entities.Anewluv.photo> getallphotosbyusername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getphotosbyprofileidandstatus", ReplyAction="http://tempuri.org/IPhotoService/getphotosbyprofileidandstatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        System.Collections.Generic.List<Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoEditModel> getphotosbyprofileidandstatus(string profileid, Shell.MVC2.Domain.Entities.Anewluv.photoapprovalstatusEnum status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getpagedphotosbyprofileidstatus", ReplyAction="http://tempuri.org/IPhotoService/getpagedphotosbyprofileidstatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        System.Collections.Generic.List<Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoEditModel> getpagedphotosbyprofileidstatus(string profileid, Shell.MVC2.Domain.Entities.Anewluv.photoapprovalstatusEnum status, string page, string pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getsingleprofilephotobyphotoid", ReplyAction="http://tempuri.org/IPhotoService/getsingleprofilephotobyphotoidResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoEditModel getsingleprofilephotobyphotoid(string photoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getpagededitphotoviewmodelbyprofileid", ReplyAction="http://tempuri.org/IPhotoService/getpagededitphotoviewmodelbyprofileidResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoEditViewModel getpagededitphotoviewmodelbyprofileid(string profileid, string page, string pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/deleteduserphoto", ReplyAction="http://tempuri.org/IPhotoService/deleteduserphotoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        void deleteduserphoto(string photoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/makeuserphoto_private", ReplyAction="http://tempuri.org/IPhotoService/makeuserphoto_privateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        void makeuserphoto_private(string photoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/makeuserphoto_public", ReplyAction="http://tempuri.org/IPhotoService/makeuserphoto_publicResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        void makeuserphoto_public(string photoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/addphotos", ReplyAction="http://tempuri.org/IPhotoService/addphotosResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        bool addphotos(Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoUploadViewModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/addsinglephoto", ReplyAction="http://tempuri.org/IPhotoService/addsinglephotoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        bool addsinglephoto(Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoUploadModel newphoto, string profileid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/checkvalidjpggif", ReplyAction="http://tempuri.org/IPhotoService/checkvalidjpggifResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        bool checkvalidjpggif(byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getgalleryphotobyscreenname", ReplyAction="http://tempuri.org/IPhotoService/getgalleryphotobyscreennameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        byte[] getgalleryphotobyscreenname(string screenname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getgalleryimagebyphotoid", ReplyAction="http://tempuri.org/IPhotoService/getgalleryimagebyphotoidResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        byte[] getgalleryimagebyphotoid(string photoid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getgalleryphotobyprofileid", ReplyAction="http://tempuri.org/IPhotoService/getgalleryphotobyprofileidResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        byte[] getgalleryphotobyprofileid(string profileid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getgalleryimagebynormalizedscreenname", ReplyAction="http://tempuri.org/IPhotoService/getgalleryimagebynormalizedscreennameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        byte[] getgalleryimagebynormalizedscreenname(string screenname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/checkifphotocaptionalreadyexists", ReplyAction="http://tempuri.org/IPhotoService/checkifphotocaptionalreadyexistsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        bool checkifphotocaptionalreadyexists(string profileid, string photocaption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/checkforgalleryphotobyprofileid", ReplyAction="http://tempuri.org/IPhotoService/checkforgalleryphotobyprofileidResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        bool checkforgalleryphotobyprofileid(string profileid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/checkforuploadedphotobyprofileid", ReplyAction="http://tempuri.org/IPhotoService/checkforuploadedphotobyprofileidResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        bool checkforuploadedphotobyprofileid(string profileid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/getimagebytesfromurl", ReplyAction="http://tempuri.org/IPhotoService/getimagebytesfromurlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Misc.PhotoService.ServiceFault), Action="http://Schemas.Testws.Medtox.com", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/")]
        byte[] getimagebytesfromurl(string imageUrl, string source);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhotoServiceChannel : Misc.PhotoService.IPhotoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhotoServiceClient : System.ServiceModel.ClientBase<Misc.PhotoService.IPhotoService>, Misc.PhotoService.IPhotoService {
        
        public PhotoServiceClient() {
        }
        
        public PhotoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhotoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Shell.MVC2.Domain.Entities.Anewluv.photo> getallphotosbyusername(string username) {
            return base.Channel.getallphotosbyusername(username);
        }
        
        public System.Collections.Generic.List<Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoEditModel> getphotosbyprofileidandstatus(string profileid, Shell.MVC2.Domain.Entities.Anewluv.photoapprovalstatusEnum status) {
            return base.Channel.getphotosbyprofileidandstatus(profileid, status);
        }
        
        public System.Collections.Generic.List<Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoEditModel> getpagedphotosbyprofileidstatus(string profileid, Shell.MVC2.Domain.Entities.Anewluv.photoapprovalstatusEnum status, string page, string pagesize) {
            return base.Channel.getpagedphotosbyprofileidstatus(profileid, status, page, pagesize);
        }
        
        public Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoEditModel getsingleprofilephotobyphotoid(string photoid) {
            return base.Channel.getsingleprofilephotobyphotoid(photoid);
        }
        
        public Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoEditViewModel getpagededitphotoviewmodelbyprofileid(string profileid, string page, string pagesize) {
            return base.Channel.getpagededitphotoviewmodelbyprofileid(profileid, page, pagesize);
        }
        
        public void deleteduserphoto(string photoid) {
            base.Channel.deleteduserphoto(photoid);
        }
        
        public void makeuserphoto_private(string photoid) {
            base.Channel.makeuserphoto_private(photoid);
        }
        
        public void makeuserphoto_public(string photoid) {
            base.Channel.makeuserphoto_public(photoid);
        }
        
        public bool addphotos(Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoUploadViewModel model) {
            return base.Channel.addphotos(model);
        }
        
        public bool addsinglephoto(Shell.MVC2.Domain.Entities.Anewluv.ViewModels.PhotoUploadModel newphoto, string profileid) {
            return base.Channel.addsinglephoto(newphoto, profileid);
        }
        
        public bool checkvalidjpggif(byte[] image) {
            return base.Channel.checkvalidjpggif(image);
        }
        
        public byte[] getgalleryphotobyscreenname(string screenname) {
            return base.Channel.getgalleryphotobyscreenname(screenname);
        }
        
        public byte[] getgalleryimagebyphotoid(string photoid) {
            return base.Channel.getgalleryimagebyphotoid(photoid);
        }
        
        public byte[] getgalleryphotobyprofileid(string profileid) {
            return base.Channel.getgalleryphotobyprofileid(profileid);
        }
        
        public byte[] getgalleryimagebynormalizedscreenname(string screenname) {
            return base.Channel.getgalleryimagebynormalizedscreenname(screenname);
        }
        
        public bool checkifphotocaptionalreadyexists(string profileid, string photocaption) {
            return base.Channel.checkifphotocaptionalreadyexists(profileid, photocaption);
        }
        
        public bool checkforgalleryphotobyprofileid(string profileid) {
            return base.Channel.checkforgalleryphotobyprofileid(profileid);
        }
        
        public bool checkforuploadedphotobyprofileid(string profileid) {
            return base.Channel.checkforuploadedphotobyprofileid(profileid);
        }
        
        public byte[] getimagebytesfromurl(string imageUrl, string source) {
            return base.Channel.getimagebytesfromurl(imageUrl, source);
        }
    }
}
